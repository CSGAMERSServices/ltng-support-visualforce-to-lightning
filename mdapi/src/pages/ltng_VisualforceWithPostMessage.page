<!--
/** 
 * Basic visualforce page WITH postmessages to communicate.
 * <p>Note that when it changes a value, a postmessage is sent
 *  and received by the VisualforceContainer
 *  and then broadcast to all lightning components.</p>
 * @page ltng_VisualforceWithPostMessage
**/
-->
<apex:page standardController="ltng_LightningToVisualforceBase__c"
	extensions="ltng_VisualforceWithoutPostMessageCtrl"
>
    <apex:includeScript value="{!URLFOR( $Resource.ltng_PostMessageResources,'/js/events/PostMessageEnvelope2.js' )}"/>
    <apex:includeScript value="{!URLFOR( $Resource.ltng_PostMessageResources,'/js/events/PostMessageOffice.js' )}"/>
    <script type='text/javascript'>
    /**
     * Called from the 'onComplete' from the commandButton action.
     **/
    function handleSaveCompleted(){
        console.info('Save Completed');
        
        //-- simple library that can be used in lightning experience / vf / heroku / etc.
        //-- new PostMessageEnvelope(
        //--    @param originatingPageName:String - identifier to know which page made the request
        //--    @param methodName:String - messageType sent (must match the type accepted on the PostMessageOffice handlers)
        //--    @param isSuccessful (Boolean) - whether the action was successful or not
        //--    @param payload (Object) - the object to pass as the `data`
        //-- )
        //-- the ltngVisualforceContainer lightning component then accepts it

        var postMessage = new PostMessageEnvelope(
            "ltng_VisualforceWithPostMessage", //-- page name
            "saveComplete", //-- message type
            true, //-- save completed
            {
                "auraId": "{!$CurrentPage.parameters.auraId}" //-- pass auraId if we want other tabs to know when to refresh
            }
        );
        
        //-- tell the postMessage to dispatch
        //-- postMessage.dispatch( targetWindow:window );
        postMessage.dispatch(window.parent);
    }

    /**
     * Called to dispatch a lightning event from Visualforce
     **/
    function dispatchToastMessage(){
        console.info('Save Completed');
        
        //-- simple library that can be used in lightning experience / vf / heroku / etc.
        //-- new PostMessageEnvelope(
        //--    @param originatingPageName:String - identifier to know which page made the request
        //--    @param methodName:String - messageType sent (must match the type accepted on the PostMessageOffice handlers)
        //--    @param isSuccessful (Boolean) - whether the action was successful or not
        //--    @param payload (Object) - the object to pass as the `data`
        //-- )
        //-- the ltngVisualforceContainer lightning component then accepts it

        var postMessage = new PostMessageEnvelope(
            "ltng_VisualforceWithPostMessage", //-- page name
            "showToast", //-- message type
            true, //-- save completed
            {
                "auraId": "{!$CurrentPage.parameters.auraId}",
                "message": "Hello from your Visualforce Page",
                "title": "Message from VF"
            }
        );
        
        postMessage.dispatch(window.parent);
    }

    /**
     * Sets up the listners for visualforce notifications.
     **/
    function setupPostMessageListeners(){
        
        //-- create a PostMessageOffice
        //-- this allows us to accept postMessages dispatched to this window.
        //-- new PostMessageOffice(
        //--    @param targetScope:Object - the scope to use as 'this' in the handlers
        //-- )
        window.postOffice = new PostMessageOffice(this);
        
        //-- handle the save complete
        //-- register a handler to run when receiving a 'saveComplete' postMessage
        //-- addTypeHandler(
        //--    @param messageType:String - the messageType this handler should run for
        //-- )
        window.postOffice.addTypeHandler( 'saveComplete', function( myPostMessage ){
            //-- now notify visualforce pages.
            console.info('page heard that the saveComplete event was given');
        });
        
        //-- handle the save complete
        //-- register a handler to run when receiving a 'forceRefresh' postMessage
        //-- addTypeHandler(
        //--    @param messageType:String - the messageType this handler should run for
        //-- )
        window.postOffice.addTypeHandler( 'forceRefresh', function( myPostMessage ){
            //-- now notify visualforce pages.
            console.info('page heard that the forceRefresh event was given');        
        });
        
        //-- direct the PostMessageOffice to listen for postMessages for a given window
        //-- listenForPostEvents(
        //--    @param targetWindow:Window - window to listen for postMessages on
        //-- )
        window.postOffice.listenForPostEvents(window);
    }

    //-- call when the page is ready
    setupPostMessageListeners();

    </script>
    <apex:outputPanel id="form">
        <apex:pageBlock title="Current Values">
            <apex:outputField value="{! ltng_LightningToVisualforceBase__c.Value__c }" />
        </apex:pageBlock>
    	<apex:form >
            <!-- Action Functions
			Action Functions and Remoting calls both
			support detection that the save completed.
			- We use this detection to dispatch the PostMessage
			to the Lightning Experience, through the VisualforceContainer component
			-->
            <!--
            <apex:actionFunction name="updateRecord" action="{!updateRecord}"
            	onComplete="handleUpdateRecordCompleted(); return false"
            />
			-->
            <apex:pageMessages />
        	<apex:pageBlock title="Value Edit Form">
                <apex:pageBlockSection columns="1">
                    <apex:inputField value="{! ltng_LightningToVisualforceBase__c.Value__c }" />
                </apex:pageBlockSection>
                <apex:pageBlockButtons >
                	<apex:commandButton value="Save"
                    	action="{!updateRecord}"
                        onComplete="handleSaveCompleted(); return false;"
                        reRender="form"
                    />
                    <apex:commandButton value="Send Lightning Event"
                        onClick="dispatchToastMessage(); return false;"
                    />
                </apex:pageBlockButtons>
            </apex:pageBlock>
        </apex:form>
    </apex:outputPanel>
</apex:page>